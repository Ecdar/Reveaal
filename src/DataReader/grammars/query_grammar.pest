queries = {SOI ~ queryList? ~ EOI}

queryList = {query ~ ";" ~ queryList | query}

query = {refinement | consistency | implementation | determinism | specification | getComponent | prune | bisim | logicFormulas}


refinement = {"refinement:" ~ expr ~ "<=" ~ expr}

consistency = {"consistency:" ~ expr}

implementation = {"implementation:" ~ expr}

getComponent = {"get-component:" ~ saveExpr}

prune = {"prune:" ~ saveExpr}

bisim = {"bisim-minim:" ~ saveExpr}

determinism = {"determinism:" ~ expr}

specification = {"specification:" ~ expr}

saveExpr = {  expr  ~ "save-as" ~ variable}

expr = { terms ~ (featureOperator ~ terms)*}

logicFormulas = {possibly | invariantly | eventuallyAlways | potentially}

possibly = {"E<>" ~ boolExpr}

invariantly = {"A[]" ~ boolExpr}

eventuallyAlways = {"E[]" ~ boolExpr}

potentially = {"A<>" ~ boolExpr}

boolExpr = {andExpr}

andExpr = { orExpr ~ "&&" ~ andExpr | orExpr }

orExpr = { compExpr ~ "||" ~ orExpr | compExpr }

compExpr = {subExpr ~ operator ~ compExpr | subExpr}

subExpr = {parenthesizedSubExp |notExpr | term}

notExpr = {"not" ~ boolExpr}

parenthesizedSubExp = { "(" ~ boolExpr ~ ")"}

terms = { term | parenthesizedExp  }

parenthesizedExp = { "(" ~ expr ~ ")"}

term = {atom | var}
atom = {int | "true" | "false" }

var = {variable ~ ":" ~ logicFormulas | variable}
variable = { (variable_name ~ "."?)+ ~ (int | variable_name)?}
variable_name = @{(ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) ~ !"-"}

int = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

operator = {">=" | "<=" | "<" | ">" }

featureOperator = _{ qoutient_op | conjunction_op | composition_op }

qoutient_op = { "//" }
conjunction_op = { "&&" }
composition_op = { "||" }

WHITESPACE = _{ " " | "\n" | "\r\n" | "\t"}