guard = {SOI ~ boolExpr? ~ ";"? ~ EOI}

update = {SOI ~ assignments? ~ EOI}

// Allow trailing comma
assignments = {assignment ~ ("," ~ assignment)* ~ ","?}

// If we want to allow boolean variables, we need to allow assigning them here.
assignment = {variable ~ ("=" | ":=") ~ arithExpr}

// ----- Expressions evaluating to a boolean value -----
boolExpr = { boolTerm ~ (bool_op ~ boolTerm)* }

// If we want to allow boolean variables, we need to allow using them here.
boolTerm = _{ comparison | bool | parenthesizedBoolExpr }

comparison = { arithExpr ~ compare_op ~ arithExpr }

parenthesizedBoolExpr = _{ "(" ~ boolExpr ~ ")"}

// ----- Expressions evaluating to a number or variable -----
arithExpr = {arithTerm ~ (arith_op ~ arithTerm)*}

arithTerm = _{ parenthesizedArithExp  | term }

parenthesizedArithExp = _{ "(" ~ arithExpr ~ ")"}

// ----- Operators -----
bool_op = _{ and | or }
and = { "&&" }
or = { "||" }

arith_op = _{ add | sub | mul | div | modulo }
add = { "+" } // Addition
sub = { "-" } // Subtraction
mul = { "*" } // Multiplication
div = { "/" } // Division
modulo = { "%" } // Modulo

compare_op = _{ geq | leq | eq | lt | gt }
geq = { ">=" } // Greater than or equal to
leq = { "<=" } // Less than or equal to
eq = { "==" } // Equal to
lt = { "<" } // Less than
gt = { ">" } // Greater than

// ----- Terms -----
variable = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

term = _{int | variable}
bool = _{ bool_true | bool_false }
bool_true = { "true" }
bool_false = { "false" }

int = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

WHITESPACE = _{ " " | "\n" | "\r\n" | "\t"}

//// Currently unused:
// negation = {"!" ~ comparison}
// numNegation = {"-" ~ parenthesizedExp | "-" ~ term}
// variable = { (variable_name ~ ("." | "þ" | "€")?)+ ~ (int | variable_name)?}
// variable_name ={ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "þ" | "ð" | "đ" | "œ")*}
// string = ${ "\"" ~ inner ~ "\"" }
// inner = @{ char* }
// char = {!("\"") ~ ANY}
// number = @{ int ~ ("." ~ ASCII_DIGIT+)? }
